const zlib = require('zlib'); // Make sure zlib is required correctly
const fetch = require('node-fetch'); // For node-fetch in Node.js environment

async function downloadFromSnow(req) {
    const user = await verifyOktaToken(req.headers); // Token verification
    try {
        const { attach_id } = req?.query;
        const reqHeaders = await getServiceNowRequestHeader();
        const apiUrl = `${config.serviceNow.apiBaseUrl}/eplc/essdocumentmanage/download?attach_id=${attach_id}`;
        
        const requestOptions = {
            method: 'GET',
            headers: reqHeaders
        };

        const result = await fetch(apiUrl, requestOptions);

        // Check if request was successful
        if (!result.ok) {
            throw new Error(`HTTP error! Status: ${result.status}`);
        }

        const contentEncoding = result.headers.get('content-encoding');
        let data;

        // Check for gzip encoding
        if (contentEncoding === 'gzip') {
            const buffer = await result.buffer();
            try {
                data = await new Promise((resolve, reject) => {
                    zlib.gunzip(buffer, (err, decompressedBuffer) => {
                        if (err) {
                            reject(err); // Reject if decompression fails
                        } else {
                            resolve(decompressedBuffer);
                        }
                    });
                });
            } catch (gzipError) {
                console.error('GZIP Decompression failed:', gzipError);
                throw new Error('Decompression failed. Z_DATA_ERROR encountered.');
            }
        } else {
            // If not gzipped, just return the buffer directly
            data = await result.buffer();
        }

        // Process the data as needed (e.g., save or return)
        data.status = 200;
        return data;

    } catch (error) {
        console.error('Error:', error);
        throw { ...error, ...user }; // Attach user info to the error if necessary
    }
}
